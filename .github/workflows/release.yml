name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run with tmate debugging enabled'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  # First: Publish to crates.io
  publish-crate:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
      with:
        save-if: false  # Don't save cache on release builds to avoid Cargo.lock issues
    
    - name: Setup tmate session
      if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
      uses: mxschmitt/action-tmate@v3
    
    - name: Verify version
      run: |
        # Use cargo metadata for more robust version extraction
        cargo_version=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].version')
        
        # Skip version check for workflow_dispatch
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "✅ Manual run - using version from Cargo.toml: $cargo_version"
        else
          tag_version="${GITHUB_REF#refs/tags/v}"
          if [ "$cargo_version" != "$tag_version" ]; then
            echo "Error: Cargo.toml version ($cargo_version) doesn't match tag version ($tag_version)"
            exit 1
          fi
          echo "✅ Version verified: $cargo_version"
        fi
        
    - name: Run tests
      run: cargo test --all-features --verbose

    - name: Check code formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Verify package
      run: cargo package --verbose --locked

    - name: Publish to Crates.io
      run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
      env:
        CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  # Second: Create GitHub Release
  create-release:
    name: Create GitHub Release
    needs: publish-crate
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version from tag or Cargo.toml
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # For manual runs, get version from Cargo.toml
          version=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].version')
          echo "version=$version" >> $GITHUB_OUTPUT
        else
          # For tag pushes, extract from tag
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', steps.get_version.outputs.version) || github.ref }}
        release_name: Release v${{ steps.get_version.outputs.version }}
        body: |
          ## Installation
          
          Install via cargo:
          ```bash
          cargo install sftui
          ```
          
          ## Changes
          
          See [CHANGELOG.md](https://github.com/wtnqk/sftui/blob/master/CHANGELOG.md) for details.
        draft: false
        prerelease: false

